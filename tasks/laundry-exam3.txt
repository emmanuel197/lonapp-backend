from django.db import models
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _


class LaundryOrganization(models.Model):
    name        = models.CharField(max_length=150, help_text="(Optional) Company display name")
    created_at  = models.DateTimeField(auto_now_add=True)
    updated_at  = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name or f"Organization #{self.id}"


class Department(models.Model):
    name = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.name


class Role(models.Model):
    name = models.CharField(max_length=100, unique=True, help_text="E.g. 'Manager', 'Clerk', 'Secretary'")

    def __str__(self):
        return self.name


class Module(models.Model):
    name = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.name


class Employee(models.Model):
    GENDER_CHOICES = [
        ("male",   "Male"),
        ("female", "Female"),
        ("other",  "Other"),
    ]

    organization   = models.ForeignKey(
        LaundryOrganization,
        on_delete=models.CASCADE,
        related_name="employees"
    )

    # Identification
    employee_id    = models.CharField(max_length=20, unique=True)
    profile_image  = models.ImageField(upload_to="employee_profiles/", blank=True, null=True)

    # Personal Information
    first_name     = models.CharField(max_length=50)
    middle_name    = models.CharField(max_length=50, blank=True, null=True)
    last_name      = models.CharField(max_length=50)
    personal_phone = models.CharField(max_length=20, help_text="Include country code, e.g. +233245224993")
    date_of_birth  = models.DateField(blank=True, null=True)
    gender         = models.CharField(max_length=10, choices=GENDER_CHOICES)

    # Contact Information
    contact_phone    = models.CharField(max_length=20, help_text="Alternate phone number")
    whatsapp_number  = models.CharField(max_length=20, blank=True, null=True, help_text="(Optional)")
    email            = models.EmailField(unique=True)
    residential_addr = models.TextField(help_text="Full mailing/residential address")

    # Employment Information
    job_title         = models.CharField(max_length=100)
    department        = models.ForeignKey(Department, on_delete=models.SET_NULL, blank=True, null=True)
    employment_status = models.CharField(max_length=50, help_text="E.g. 'Full‐Time', 'Contractor', etc.")
    supervisor        = models.ForeignKey(
        "self",
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
        related_name="subordinates"
    )
    hire_date         = models.DateField(blank=True, null=True)

    # Attendance & Schedule
    start_shift   = models.TimeField(blank=True, null=True)
    break_time    = models.TimeField(blank=True, null=True)
    end_shift     = models.TimeField(blank=True, null=True)
    work_days     = models.CharField(
        max_length=50,
        help_text="Comma‐separated days, e.g. 'Mon,Tue,Thu,Fri'"
    )
    days_per_week = models.PositiveSmallIntegerField(default=5)

    # Leave & Time Off
    vacation_days        = models.PositiveSmallIntegerField(default=0)
    sick_leave_days      = models.PositiveSmallIntegerField(default=0)
    compassionate_days   = models.PositiveSmallIntegerField(default=0)
    maternity_leave_days = models.PositiveSmallIntegerField(default=0)

    # Qualifications
    qualification_name = models.CharField(max_length=100, blank=True, null=True)
    year_attained      = models.DateField(blank=True, null=True)

    # HR Notes
    hr_notes = models.TextField(blank=True, null=True)

    # Module Permissions & Role
    modules = models.ManyToManyField(Module, blank=True, related_name="employees")
    role    = models.ForeignKey(Role, on_delete=models.SET_NULL, blank=True, null=True)

    # Audit
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def clean(self):
        # Ensure end_shift > start_shift if both are set
        if self.start_shift and self.end_shift:
            if self.end_shift <= self.start_shift:
                raise ValidationError(_("End shift must be after start shift."))

    @property
    def total_hours_per_day(self):
        """
        If start_shift, break_time, and end_shift are all provided,
        return a string like "8h 30m". Otherwise None.
        """
        if self.start_shift and self.break_time and self.end_shift:
            # Convert to minutes from midnight
            start_minutes = self.start_shift.hour * 60 + self.start_shift.minute
            break_minutes = self.break_time.hour * 60 + self.break_time.minute
            end_minutes   = self.end_shift.hour * 60 + self.end_shift.minute

            work_duration = (end_minutes - start_minutes) - (break_minutes - start_minutes)
            if work_duration <= 0:
                return None
            hours = work_duration // 60
            mins  = work_duration % 60
            return f"{hours}h {mins}m"
        return None

    def __str__(self):
        return f"{self.first_name} {self.last_name} (ID: {self.employee_id})"


class EmergencyContact(models.Model):
    employee        = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name="emergency_contacts")
    first_name      = models.CharField(max_length=50)
    middle_name     = models.CharField(max_length=50, blank=True, null=True)
    last_name       = models.CharField(max_length=50)
    phone_number    = models.CharField(max_length=20, help_text="Include country code")
    whatsapp_number = models.CharField(max_length=20, blank=True, null=True)
    gender          = models.CharField(max_length=10, choices=Employee.GENDER_CHOICES)
    residential_addr= models.TextField(help_text="Address of this emergency contact")

    def __str__(self):
        return f"{self.first_name} {self.last_name} – Emergency contact for {self.employee.employee_id}"
