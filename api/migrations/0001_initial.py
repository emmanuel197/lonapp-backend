# Generated by Django 4.2.6 on 2025-06-06 21:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='api_user_set', related_query_name='api_user', to='auth.group', verbose_name='groups')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ItemDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(blank=True, max_length=50, null=True)),
                ('material', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=30, null=True)),
                ('size', models.CharField(blank=True, max_length=20, null=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('tag_number', models.CharField(blank=True, max_length=30, null=True)),
                ('condition', models.CharField(blank=True, max_length=30, null=True)),
                ('age', models.CharField(blank=True, help_text="Approximate age (e.g. '1 year')", max_length=30, null=True)),
                ('embellishments', models.CharField(blank=True, max_length=100, null=True)),
                ('care_label_instructions', models.TextField(blank=True, null=True)),
                ('special_handling', models.TextField(blank=True, null=True)),
                ('weight', models.CharField(blank=True, help_text="e.g. '1.2 kg'", max_length=30, null=True)),
                ('pattern_design', models.CharField(blank=True, max_length=50, null=True)),
                ('dimensions', models.CharField(blank=True, help_text="e.g. '50×30 cm'", max_length=50, null=True)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('image', models.ImageField(blank=True, help_text='Optional: photo of item (max 5 MB)', null=True, upload_to='item_images/')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_method', models.CharField(choices=[('customer_dropoff', 'Customer Drop-off'), ('company_pickup', 'Laundry Company Pick-Up')], default='customer_dropoff', max_length=20)),
                ('pickup_location', models.CharField(blank=True, help_text='If company pick-up, store pickup address/branch/etc.', max_length=100, null=True)),
                ('delivery_method', models.CharField(choices=[('pick_up', 'Pick Up'), ('delivery', 'Delivery')], default='pick_up', max_length=10)),
                ('delivery_location', models.CharField(blank=True, help_text='Address where laundry should be delivered', max_length=200, null=True)),
                ('bag_number', models.CharField(max_length=20)),
                ('invoice_number', models.CharField(max_length=20)),
                ('duration_days', models.PositiveIntegerField(default=0)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('order_status', models.CharField(choices=[('pending', 'Pending Intake'), ('received', 'Received at Outlet'), ('awaiting_pickup', 'Awaiting Dispatch Pickup'), ('in_transit_to_factory', 'In Transit (to Factory)'), ('received_at_factory', 'Received at Factory'), ('in_processing', 'In Processing'), ('qc_packaging', 'QC & Packaging'), ('awaiting_return_dispatch', 'Awaiting Return Dispatch'), ('in_transit_to_outlet', 'In Transit (to Outlet)'), ('received_at_outlet', 'Received back at Outlet'), ('ready_for_pickup', 'Ready for Customer Pickup'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='received', max_length=50)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('partial', 'Partial'), ('paid', 'Paid'), ('refunded', 'Refunded')], default='pending', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_orders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contact_info', models.TextField(blank=True, null=True)),
                ('billing_status', models.CharField(default='active', max_length=50)),
                ('unique_identifier', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('super_admin', 'Super Admin'), ('org_admin', 'Organization Admin'), ('attendant', 'Attendant'), ('dispatcher', 'Dispatcher'), ('washer', 'Washer'), ('dryer', 'Dryer'), ('ironer', 'Ironer'), ('qc_packager', 'QC Packager'), ('customer', 'Customer')], max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TurnaroundTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('hours', models.IntegerField()),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='turnaround_times', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_type', models.CharField(max_length=100)),
                ('billing_cycle', models.CharField(max_length=50)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('active_status', models.BooleanField(default=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_types', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_type', models.CharField(choices=[('sole_proprietor', 'Sole Proprietor'), ('partnership', 'Partnership'), ('llc', 'Limited Liability Company'), ('unregistered', 'Unregistered')], max_length=20)),
                ('document_name', models.CharField(choices=[('cert_registration', 'Certification of Registration'), ('form_a', 'Form A'), ('cert_incorporation', 'Certification of Incorporation'), ('form_3b', 'Form 3B'), ('partnership_deed', 'Partnership Deed (Optional)')], max_length=30)),
                ('file', models.FileField(help_text='Max file size: 5 MB.', upload_to='registration_docs/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_documents', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('bank', 'Bank Account'), ('mobile_money', 'Mobile Money')], max_length=20)),
                ('bank_name', models.CharField(blank=True, choices=[('calbank', 'CalBank'), ('gt_bank', 'GTBank'), ('stanbic', 'Stanbic')], help_text="Select Bank (if payment_type is 'bank')", max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, help_text='Enter bank account number', max_length=30, null=True)),
                ('branch', models.CharField(blank=True, help_text='Bank branch name', max_length=50, null=True)),
                ('mobile_network', models.CharField(blank=True, choices=[('mtn', 'MTN'), ('vodafone', 'Vodafone'), ('airtel_tigo', 'AirtelTigo')], help_text='Select Mobile Money network', max_length=20, null=True)),
                ('merchant_number', models.CharField(blank=True, help_text='Mobile Money merchant number', max_length=30, null=True)),
                ('merchant_id', models.CharField(blank=True, help_text='Mobile Money merchant ID', max_length=50, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_details', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Outlet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='E.g. Pokosiai Laundry', max_length=100)),
                ('abbreviated_name', models.CharField(help_text='E.g. PK', max_length=20)),
                ('phone_number', models.CharField(help_text='Include country code', max_length=20)),
                ('whatsapp_number', models.CharField(help_text='Include country code', max_length=20)),
                ('physical_address', models.CharField(max_length=200)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outlets', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='OrderPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('mobile_money', 'Mobile Money'), ('bank_transfer', 'Bank Transfer'), ('online', 'Online Payment Gateway'), ('other', 'Other')], max_length=50)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='api.order')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_payments', to='api.organization')),
                ('received_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments_received', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='api.organization'),
        ),
        migrations.AddField(
            model_name='order',
            name='outlet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outlet_orders', to='api.outlet'),
        ),
        migrations.CreateModel(
            name='LaundryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
                ('unit_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('current_stage', models.CharField(choices=[('received', 'Received'), ('awaiting_wash', 'Awaiting Washing'), ('in_washing', 'In Washing'), ('washing_complete', 'Washing Complete'), ('awaiting_dry', 'Awaiting Drying'), ('in_drying', 'In Drying'), ('drying_complete', 'Drying Complete'), ('awaiting_iron', 'Awaiting Ironing'), ('in_ironing', 'In Ironing'), ('ironing_complete', 'Ironing Complete'), ('awaiting_qc', 'Awaiting QC'), ('in_qc', 'In QC'), ('qc_passed', 'QC Passed'), ('qc_failed', 'QC Failed'), ('awaiting_package', 'Awaiting Packaging'), ('packaged', 'Packaged'), ('awaiting_dispatch_return', 'Awaiting Dispatch Return'), ('in_transit_to_outlet', 'In Transit (to Outlet)'), ('received_at_outlet', 'Received back at Outlet'), ('ready_for_pickup', 'Ready for Pickup'), ('picked_up', 'Picked Up'), ('returned_to_wash', 'Returned to Washing (Defect)'), ('returned_to_dry', 'Returned to Drying (Defect)'), ('returned_to_iron', 'Returned to Ironing (Defect)'), ('damaged', 'Damaged')], default='received', max_length=50)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('detail', models.OneToOneField(blank=True, help_text='Complete item description/care info', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='laundry_item', to='api.itemdetail')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.order')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='laundry_items', to='api.organization')),
                ('service_types', models.ManyToManyField(related_name='items', to='api.servicetype')),
                ('turnaround_time', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.turnaroundtime')),
            ],
        ),
        migrations.CreateModel(
            name='ItemHandover',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_stage', models.CharField(blank=True, choices=[('washing', 'Washing'), ('drying', 'Drying'), ('ironing', 'Ironing'), ('qc', 'QC'), ('packaging', 'Packaging'), ('outlet_return', 'Return to Outlet'), ('factory_intake', 'Factory Intake')], max_length=50, null=True)),
                ('to_stage', models.CharField(choices=[('washing', 'Washing'), ('drying', 'Drying'), ('ironing', 'Ironing'), ('qc', 'QC'), ('packaging', 'Packaging'), ('outlet_return', 'Return to Outlet'), ('factory_intake', 'Factory Intake')], max_length=50)),
                ('handed_over_at', models.DateTimeField(auto_now_add=True)),
                ('received_at', models.DateTimeField(blank=True, null=True)),
                ('handed_over_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handovers_given', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='handovers', to='api.laundryitem')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_handovers', to='api.organization')),
                ('received_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handovers_received', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='itemdetail',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_details', to='api.organization'),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='employee_profiles/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('contact_phone', models.CharField(blank=True, help_text='Alternate phone number', max_length=20, null=True)),
                ('whatsapp_number', models.CharField(blank=True, help_text='(Optional)', max_length=20, null=True)),
                ('residential_addr', models.TextField(blank=True, help_text='Full mailing/residential address', null=True)),
                ('job_title', models.CharField(blank=True, max_length=100, null=True)),
                ('employment_status', models.CharField(blank=True, help_text="E.g. 'Full‐Time', 'Contractor', etc.", max_length=50, null=True)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('start_shift', models.TimeField(blank=True, null=True)),
                ('break_time', models.TimeField(blank=True, null=True)),
                ('end_shift', models.TimeField(blank=True, null=True)),
                ('work_days', models.CharField(blank=True, help_text="Comma‐separated days, e.g. 'Mon,Tue,Thu,Fri'", max_length=50, null=True)),
                ('days_per_week', models.PositiveSmallIntegerField(default=5)),
                ('vacation_days', models.PositiveSmallIntegerField(default=0)),
                ('sick_leave_days', models.PositiveSmallIntegerField(default=0)),
                ('compassionate_days', models.PositiveSmallIntegerField(default=0)),
                ('maternity_leave_days', models.PositiveSmallIntegerField(default=0)),
                ('qualification_name', models.CharField(blank=True, max_length=100, null=True)),
                ('year_attained', models.DateField(blank=True, null=True)),
                ('hr_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('break_duration_minutes', models.PositiveSmallIntegerField(blank=True, default=30, help_text='Break duration in minutes', null=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.department')),
                ('modules', models.ManyToManyField(blank=True, related_name='employees', to='api.module')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='api.organization')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='api.employee')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(help_text='Include country code', max_length=20)),
                ('whatsapp_number', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('residential_addr', models.TextField(blank=True, help_text='Address of this emergency contact', null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to='api.employee')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='DispatchRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_to_factory', models.BooleanField(default=False)),
                ('is_from_factory', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Pickup'), ('accepted', 'Accepted by Dispatcher'), ('in_transit', 'In Transit'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_dispatcher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispatches_assigned', to=settings.AUTH_USER_MODEL)),
                ('destination_outlet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispatches_received', to='api.outlet')),
                ('items', models.ManyToManyField(related_name='dispatches', to='api.laundryitem')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispatch_requests', to='api.organization')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispatches_requested', to=settings.AUTH_USER_MODEL)),
                ('source_outlet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispatches_sent', to='api.outlet')),
            ],
        ),
        migrations.AddField(
            model_name='department',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='api.organization'),
        ),
        migrations.CreateModel(
            name='DefectReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defect_type', models.CharField(choices=[('stain_not_removed', 'Stain Not Removed'), ('damage', 'Damage'), ('missing_button', 'Missing Button'), ('color_bleed', 'Color Bleed'), ('shrinkage', 'Shrinkage'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('stage_found', models.CharField(choices=[('washing', 'Washing'), ('drying', 'Drying'), ('ironing', 'Ironing'), ('qc', 'QC'), ('packaging', 'Packaging'), ('outlet_return', 'Return to Outlet'), ('factory_intake', 'Factory Intake')], max_length=50)),
                ('resolved_flag', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defect_reports', to='api.laundryitem')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defect_reports', to='api.organization')),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='defects_reported', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='defects_resolved', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.CharField(help_text="Unique Customer Code (e.g. '0001', '0002', etc.)", max_length=20, unique=True)),
                ('profile_image', models.ImageField(blank=True, help_text='Optional profile photo', null=True, upload_to='customer_profiles/')),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('whatsapp_number', models.CharField(blank=True, help_text='(Optional) Include country code', max_length=20, null=True)),
                ('delivery_address', models.TextField(blank=True, help_text='Address where we deliver (often same as physical_address).', null=True)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], default='active', help_text='Is the customer active, suspended, etc.?', max_length=20)),
                ('payment_method', models.CharField(blank=True, choices=[('card', 'Card'), ('mobile_money', 'Mobile Money'), ('cash', 'Physical Cash')], max_length=20, null=True)),
                ('card_number', models.CharField(blank=True, help_text="e.g. 'XXXX-XXXX-XXXX-XXXX' (only if payment_method='card')", max_length=20, null=True)),
                ('expiry_date', models.CharField(blank=True, help_text="MM/YY (only if payment_method='card')", max_length=5, null=True)),
                ('cvc', models.CharField(blank=True, help_text="CVC (only if payment_method='card')", max_length=4, null=True)),
                ('mobile_money_network', models.CharField(blank=True, help_text="(Only if payment_method='mobile_money') e.g. 'MTN', 'Vodafone', etc.", max_length=20, null=True)),
                ('mobile_money_number', models.CharField(blank=True, help_text='Mobile Money number (if that is the payment method)', max_length=20, null=True)),
                ('preferred_pickup_days', models.CharField(blank=True, help_text="Comma‐separated weekdays, e.g. 'Mon,Tue,Fri' to indicate preferred pickup/delivery days.", max_length=50, null=True)),
                ('days_per_week', models.PositiveSmallIntegerField(default=1, help_text='Number of pickup/delivery days per week (e.g. 1, 2, 3…).')),
                ('special_instructions', models.TextField(blank=True, help_text='Any special delivery/pickup instructions.', null=True)),
                ('subscription_status', models.CharField(blank=True, choices=[('subscribed', 'Subscribed'), ('unsubscribed', 'Unsubscribed'), ('trial', 'Trial')], help_text='Is the customer on a subscription plan, trial, or unsubscribed?', max_length=20, null=True)),
                ('loyalty_points', models.PositiveIntegerField(default=0, help_text='Total loyalty points accrued')),
                ('communication_channels', models.CharField(blank=True, help_text='Comma‐separated communication channels the customer prefers. Possible values: in_notification, email, sms, whatsapp', max_length=100, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(help_text='Which laundry company this customer belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='api.organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staff_users', to='api.organization'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='api_user_permissions_set', related_query_name='api_user_permission', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('facebook', 'Facebook'), ('instagram', 'Instagram'), ('twitter', 'Twitter'), ('linkedin', 'LinkedIn'), ('tiktok', 'TikTok')], max_length=20)),
                ('account_handle', models.CharField(help_text='E.g. SunnyLaundry@1234', max_length=100)),
                ('link', models.URLField(help_text='Full URL to the social page')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_media_accounts', to='api.organization')),
            ],
            options={
                'unique_together': {('organization', 'platform')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='order',
            unique_together={('organization', 'bag_number'), ('organization', 'invoice_number')},
        ),
        migrations.AlterUniqueTogether(
            name='department',
            unique_together={('organization', 'name')},
        ),
    ]
